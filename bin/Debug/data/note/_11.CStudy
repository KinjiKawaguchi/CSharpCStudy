【構造体とは何か覚えよう】

C言語には、複数の異なるデータ型の値でもひとまとまりにできる構造体がある。

char型配列-double型-int型...

このような構造体は、必要に応じて新しいデータ型として定義する。

定義した構造体も新しいデータ型として変数を宣言して使用する。


【構造体を定義してみよう】

まずは、定義を行う。構造体の「型の定義」は、予約語の「struct」を使って定義する。

定義した構造体のデータ型は、struct 構造体タグ名　となる。

構造体の型を定義したら、その型を使って構造体の変数をいくつでも宣言できるようになる。

構造体タグ名は、型の異なるほかの構造体と識別するための名前である。

構造体として{　}で囲んでひとまとまりにするものをメンバと呼ぶ。

メンバは、データ型とともに変数名や配列名を付けて定義する。

構造体は、定義した構造体の「型」を使って変数を宣言して使用する、次のように宣言する。

struct 構造体タグ名　構造体変数名[,　構造体変数名, …};

宣言と定義は同時に行うことも可能である。


【構造体を使ってみよう】

宣言した構造体変数の値の格納や値の表示はメンバごとに行う。

メンバを参照するには、構造体変数の名前とメンバの名前を「.（ピリオド）」でつなげる。

構造体変数名.メンバ名

また、構造体変数を定義すると同時に初期化することもできる。

書き並べた初期値は定義したメンバの順番に格納され、初期値がないメンバの値は不定となる。

初期化は次のように行う。

struct 構造体タグ名　構造体変数名 = { 初期値 [,　初期値, …]};

さらに、構造体の型の定義と同時に宣言した変数も初期化することができる。

構造体変数の値は、まるごと同じ構造体の変数に代入をすることができる。

配列の値は、まるごと同じデータ型のほかの配列に代入することはできない。


【構造体の様々な使い方をしてみよう】

複数の同じ構造体の値を要素にする配列も作ることができる。

struct 構造体タグ名　構造体配列名[ 要素数 ];

構造体配列要素のそれぞれのメンバを参照するには、次のように書く。

構造体配列名[ 要素番号 ].メンバ名

各要素が構造体の値であり、それぞれの要素にメンバがある。

ポインタで構造体を扱うこともできる。

struct 構造体タグ名 *構造体へのポインタ;

構造体へのポインタには、次のようにして構造体変数のある場所を格納します。

構造体へのポインタ = &構造体変数;

構造体へのポインタを使ってメンバを参照するには、構造体へのポインタとメンバ名をつなげて書く。

つなげて書く際は、「->（アロー演算子）」で次のように書く。

構造体へのポインタ -> メンバ名

構造体のデータ型は、typedefを用いることで短く扱うことができるようになる。

typedef データ型 データ型の新しい名前;