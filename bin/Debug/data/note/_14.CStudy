【呼び出し元の変数・配列に直接、関数から値を格納しよう】

呼び出した関数から直接、呼び出し元の変数に値を格納できる。

これをするには、呼び出す関数に変数のある場所を渡す必要がある。

これを「参照渡し」という。

値が1つの場合は、ポインタを使うかreturn文を使うかの2つの方法がある。

ただし、複数の値を返す場合は必ずポインタを使う必要がある。

return文では、呼び出し元に1つの値を返すことしかできないからだ。

また、呼び出した関数から直接、呼び出し元で宣言された配列の要素に値を格納できる。

これをするには、配列のある場所をポインタで受け取るようにする。

ポインタを使った配列要素の場所は（ポインタ+要素番号）で表す。次のように値は出す。

*(  配列へのポインタ + 要素番号 ) = 値;

さらに、呼び出した関数から直接、呼び出し元で宣言された構造体変数のメンバに値を格納できる。

これをするには、構造体変数のある場所をポインタ変数で受け取って行う。

ポインタを使った構造体変数の値は、次のように出す。

構造体へのポインタ -> メンバ名 = 値;


【値の格納場所を返そう】

呼び出し元へ値の格納場所を返すこともできる。

return文で返す戻り値が格納場所であるため、その場所を呼び出し元でポインタに格納する。

構造体の定義は、main関数の前に行う必要がある。