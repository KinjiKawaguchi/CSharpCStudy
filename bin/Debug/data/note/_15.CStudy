【宣言した名前の有効範囲を知ろう】

C言語では、名前をどこで宣言するかによって名前がどの範囲で使えるかが決まる。

この範囲を、その名前の「有効範囲」という。

有効範囲にない場所では、その名前を使うことはできない。

関数の内部またはその仮引数の宣言部分で宣言された名前は、その内部が有効範囲である。

このような範囲となる名前を「ローカルな名前」という。

関数の内部とは、仮引数の宣言部分の後ろに続く中括弧でくくられた部分のことを言う。

関数の内部で宣言する名前は、その関数の中だけであるためほかの場所を気にしなくて良い。

ただし、同じ名前が異なるものを表していて、その有効範囲が同じであることは許されない。

関数の内部でも仮引数の宣言部分でもない場所で宣言された名前は、全体が有効範囲である。

このような範囲となる名前を「グローバルな名前」という。

グローバルな名前と同じ名前を関数の内部で宣言すると、ローカルな名前だけが有効となる。

つまり、ローカルな名前が優先となる。

ただし、上の場合を除いてグローバルな名前はどこでも利用することができる。

C言語では、複数のファイルで1つのプログラムを作ってもよいこととなっている。

それぞれのファイルごとで使っている名前を宣言し、その中でのみ有効範囲となっている。

そのため、複数のファイルに分けたものどうしを連携させることができない。

しかし、予約語staticが先頭に付記されていないグローバルな名前は連携ができる。

逆に、名前の宣言で予約語staticが先頭に付記された場合は、他のファイルと連携しない。

連携をするファイルは、その名前の実体を与えられていないといけない。

これはプログラムを構成するファイルのどれか1つに、実体を与えるものを書いていく。

グローバルな名前の宣言に予約語externが先頭に付記してあれば、実体が他のファイルで与えられている。


【変数などの生存期間を覚えよう】

変数や配列はコンピュータのメモリ上に置かれている。

メモリの上に置くことを「割り付け」という。

プログラムの実行開始時に割り付けを済ませるメモリ部分を「静的記憶域」という。

関数呼び出しの状況に応じて実行中に割り付けたりそれを解除したりするメモリ部分を「自動記憶域」という。

関数の内部で宣言されたローカルな変数名や配列名は、特に何も付記してなければ自動記憶域に割り付けられる。

関数の呼び出しが起こると割り付けが起こり、変数や配列に初期化が書かれていれば初期化が行われる。

実行が終了すると、割り付けは解除され、メモリは別の呼び出しでの割り付けに再利用される。

グローバルな変数名や配列名、予約語staticが付記されているものは静的記憶域に割り付けられる。

プログラムの実行が終了するまでこれは変わることがない。

静的記憶域クラスの変数名や配列名の宣言に初期化が書いてあれば、割り付け終了後に1度だけ行われる。

書かれていなければ、初期値0が格納される。