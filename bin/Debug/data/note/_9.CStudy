【ポインタを宣言してみよう】

変数には、変数の場所を格納する専用の変数「ポインタ」というものがある。

変数はメモリ上に存在している。

その変数が、メモリ上のどこにあるかのアドレスを「指し示す」のがポインタである。

ポインタを宣言するときは、次のように行う。

データ型 *変数名;

変数名の前に*が付く点が、ポインタではない通常の変数の宣言とは異なっている。

ポインタを宣言するときのポイントのデータ型は、指し示す変数と同じ型でないといけない。

ポインタ名の直前に*を付けると、格納している場所を間接参照することができる。


【ポインタと配列の関係について考えよう】

配列は、変数がコンピュータの中で隙間なく1列に並んでいる。

a[0]の場所がxだとすると、a[1]の場所はx+1 a[5]の場合はx+5

配列のように、場所が連続している変数に関してはポインタによって参照することができる。

ポインタをインクリメント（1足す）すると、ポインタの値は1増えるかと言ったらそうではない。

そのポインタのデータ型に応じたサイズ分だけポインタの値は足し算される。

例えばint型のポインタの数値を1足した場合、int型は4バイトであるためその分（4）がポインタに足し算される。

これは、コンピュータの記憶装置が1つの場所に1バイト分のデータが記憶されているからである。

＜代表的なデータ型の格納場所の大きさ＞
char...1バイト（8ビット）
int...4バイト（32ビット）
double...8バイト（64ビット）

ポインタの値が1000のint型データに対してインクリメントを行うと、ポインタの値は1004になる。